import{_ as s,c as a,a as t,o as e}from"./app-CEz_jUzm.js";const p={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h3 id="一、什么是自动装配" tabindex="-1"><a class="header-anchor" href="#一、什么是自动装配"><span>一、什么是自动装配</span></a></h3><p><code>SpringBoot</code> 定义了一套接口规范，这套规范规定：<code>SpringBoot</code>在启动时会扫描外部引用 jar 包中的 <code>META-INF/spring.factories</code>文件，将文件中配置的类型信息加载到 <code>Spring</code>容器，并执行类中定义的各种操作。对于外部 jar 包来说，只需要按照 <code>SpringBoot</code>定义的标准，就能将自己的功能装配到 <code>SpringBoot</code>中。</p><h3 id="二、自动装配的实现原理" tabindex="-1"><a class="header-anchor" href="#二、自动装配的实现原理"><span>二、自动装配的实现原理</span></a></h3><p>自动装配的实现，离不开 <code>SpringBootApplication</code>这个核心注解。查看这个注解的源码，我们会发现在 <code>SpringBootApplication</code>注解上，存在着几个注解，其中 <code>SpringBootConfiguration</code>、<code>EnableAutoConfiguration</code>、<code>ComponentScan</code>这三个注解是需要我们注意的。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@SpringBootConfiguration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableAutoConfiguration</span></span>
<span class="line"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">TypeExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">AutoConfigurationExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(1) ComponentScan</p><blockquote><p>扫描被 <code>@Component 、@Service</code>注解的 bean，该注解默认会扫描启动类所在的包下所有的类 ，可以自定义不扫描某些 bean。如 <code>SpringBootApplication</code>注解源码所示，容器中将排除 TypeExcludeFilterh 和 AutoConfigurationExcludeFilter。</p></blockquote><p>(2) EnableAutoConfiguration</p><blockquote><p>启用 SpringBoot 的自动配置机制</p></blockquote><p>(3) Configuration</p><blockquote><p>允许在上下文中注册额外的 bean 或导入其他配置类</p></blockquote><h4 id="_2-1-enableautoconfiguration-详解" tabindex="-1"><a class="header-anchor" href="#_2-1-enableautoconfiguration-详解"><span>2.1 EnableAutoConfiguration 详解</span></a></h4><p>@EnableAutoConfiguration 是实现自动装配的重要注解，在这个注解上存在以下两个注解：<code>AutoConfigurationPackage</code>、<code>Import</code>。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@AutoConfigurationPackage</span></span>
<span class="line"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-1-1-autoconfigurationpackage" tabindex="-1"><a class="header-anchor" href="#_2-1-1-autoconfigurationpackage"><span>2.1.1 AutoConfigurationPackage</span></a></h5><blockquote><p>表示对于标注该注解的类的包，应当使用 <code>AutoConfigurationPackages</code>注册。实质上，它负责保存标注相关注解的类的所在包路径。使用一个 BasePackage 类，保存这个路径。然后使用@Import 注解将其注入到 ioc 容器中。这样，可以在容器中拿到该路径。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Registrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span><span class="token punctuation">,</span> <span class="token class-name">DeterminableImports</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PackageImport</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>查看 <code>AutoConfigurationPackages</code>中的 <code>Registrar</code>这个类的源码，在 <code>Registrar#registerBeanDefinitions</code>方法中有这样一句代码 <code>new PackageImport(metadata).getPackageName()</code>，查看 PackageImport 的构造器后不难发现，这里获取的是 <code>StandardAnnotationMetadata</code>这个实例所在的包名。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * metadata: 实际上是 StandardAnnotationMetadata 实例。</span>
<span class="line"> * metadata#getClassName(): 获取标注 @AutoConfigurationPackage 注解的类的全限定名。</span>
<span class="line"> * ClassUtils.getPackageName(…): 获取其所在包。</span>
<span class="line"> */</span></span>
<span class="line"><span class="token class-name">PackageImport</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">this</span><span class="token punctuation">.</span>packageName <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>此时再回去看 <code>Registrar#registerBeanDefinitions</code>中调用的 <code>AutoConfigurationPackages#register</code>方法</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> packageNames<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// BEAN：AutoConfigurationPackages类的全限定名</span></span>
<span class="line">	<span class="token comment">// 此时判断BeanDefinitionRegistry中是否存在以BEAN作为beanName的BeanDefinition对象</span></span>
<span class="line">	<span class="token comment">// 如果不存在，走else方法，构造了一个BackPackages实例，进行注册</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span><span class="token constant">BEAN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token constant">BEAN</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token class-name">ConstructorArgumentValues</span> constructorArguments <span class="token operator">=</span> beanDefinition</span>
<span class="line">				<span class="token punctuation">.</span><span class="token function">getConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		constructorArguments<span class="token punctuation">.</span><span class="token function">addIndexedArgumentValue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">				<span class="token function">addBasePackages</span><span class="token punctuation">(</span>constructorArguments<span class="token punctuation">,</span> packageNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">GenericBeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		beanDefinition<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span><span class="token class-name">BasePackages</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		beanDefinition<span class="token punctuation">.</span><span class="token function">getConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addIndexedArgumentValue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> packageNames<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		beanDefinition<span class="token punctuation">.</span><span class="token function">setRole</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">.</span><span class="token constant">ROLE_INFRASTRUCTURE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token constant">BEAN</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-1-2-import-autoconfigurationimportselector-class" tabindex="-1"><a class="header-anchor" href="#_2-1-2-import-autoconfigurationimportselector-class"><span>2.1.2 Import(AutoConfigurationImportSelector.class)</span></a></h5><blockquote><p>它是利用 <code>AutoConfigurationImportSelector</code>机制再来给容器中批量导入一些配置东西的，接下来带大家了解究竟导入了哪些内容。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * AutoConfigurationImportSelector类中存在一个叫selectImports的方法，就是我们到底要向容器中导入哪些</span>
<span class="line"> * 内容，都会在这里进行扫描并导入。</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 判断EnableAutoConfiguration是否开启默认开启true</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">NO_IMPORTS</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 1.加载META-INF/spring-autoconfigure-metadata.properties 文件</span></span>
<span class="line">    <span class="token comment">// 2.从中获取所有符合条件的支持自动装配的类</span></span>
<span class="line">    <span class="token comment">// 自动配置类全名.条件=条件的值</span></span>
<span class="line">    <span class="token class-name">AutoConfigurationMetadata</span> autoConfigurationMetadata <span class="token operator">=</span> <span class="token class-name">AutoConfigurationMetadataLoader</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">loadMetadata</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 获取AutoConfigurationEntry</span></span>
<span class="line">    <span class="token class-name">AutoConfigurationEntry</span> autoConfigurationEntry <span class="token operator">=</span> <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>autoConfigurationMetadata<span class="token punctuation">,</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>autoConfigurationEntry<span class="token punctuation">.</span><span class="token function">getConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>接下来重点看 <code>getAutoConfigurationEntry(annotationMetadata)</code>方法，利用这个方法向容器中批量导入一些默认支持自动配置的类，当你理解了这部分内容之后，就基本了解了 Spring Boot 是如何进行自动装配的，废话不多说，让我们进入正题。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token class-name">AutoConfigurationEntry</span> <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 判断EnableAutoConfiguration是否开启默认开启true</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">EMPTY_ENTRY</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 获取注解属性</span></span>
<span class="line">    <span class="token class-name">AnnotationAttributes</span> attributes <span class="token operator">=</span> <span class="token function">getAttributes</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 调用getCandidateConfigurations(annotationMetadata, attributes)，利用loadSpringFactories(ClassLoader classLoader)加载当前系统所有的META-INF/spring.factories文件，得到默认支持的自动配置的类的列表</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 去除重复的 configuration</span></span>
<span class="line">    configurations <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 获取到SpringBootApplication上exclude和excludeName配置的需要排除的类</span></span>
<span class="line">    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> exclusions <span class="token operator">=</span> <span class="token function">getExclusions</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 检查configurations是否含有exclusions中的类</span></span>
<span class="line">    <span class="token function">checkExcludedClasses</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 将exclusions中的类从configurations中排除</span></span>
<span class="line">    configurations<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 对所有候选的自动配置类进行筛选，</span></span>
<span class="line">    <span class="token comment">// 比如ConditionalOnProperty  当属性存在时</span></span>
<span class="line">    <span class="token comment">// ConditionalOnClass  当class存在</span></span>
<span class="line">    <span class="token comment">// ConditionalOnMissingClass  当这个clas不存在时才去配置</span></span>
<span class="line">    <span class="token comment">// 过滤器</span></span>
<span class="line">    configurations <span class="token operator">=</span> <span class="token function">getConfigurationClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 将自动配置的类，导入事件监听器，并触发fireAutoConfigurationImportEvents事件</span></span>
<span class="line">	<span class="token comment">// 加载META-INF\\spring.factories中的AutoConfigurationImportListener</span></span>
<span class="line">    <span class="token function">fireAutoConfigurationImportEvents</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 创建AutoConfigurationEntry对象</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoConfigurationEntry</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26)]))}const l=s(p,[["render",o],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/blogs/SpringBoot/2022090401/","title":"从源码中理解SpringBoot自动装配原理","lang":"zh-CN","frontmatter":{"title":"从源码中理解SpringBoot自动装配原理","date":"2022-09-14T00:00:00.000Z","permalink":"/blogs/SpringBoot/2022090401/","tags":["源码"],"categories":["SpringBoot"]},"headers":[{"level":3,"title":"一、什么是自动装配","slug":"一、什么是自动装配","link":"#一、什么是自动装配","children":[]},{"level":3,"title":"二、自动装配的实现原理","slug":"二、自动装配的实现原理","link":"#二、自动装配的实现原理","children":[]}],"git":{"createdTime":1741686968000,"updatedTime":1741859854000,"contributors":[{"name":"lxy","email":"jinsulive@163.com","commits":1}]},"filePathRelative":"blogs/SpringBoot/SpringBoot自动装配原理.md"}');export{l as comp,u as data};
