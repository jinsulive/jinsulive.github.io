import{_ as o,c as i,a,b as s,d as e,e as c,r as t,o as r}from"./app-CEz_jUzm.js";const d="/assets/f9c47c2999f74e8d9b0efc45ed0e813f-BOVHhjqU.png",p="/assets/637c56f3f51245d293e9215b8805ed57-B8gyN4NN.png",u="/assets/05874c633d914051a5aff1d0d96f285b-B5zVRt8Q.png",k="/assets/7ae2731028b541f590a1ee158c61bec7-DeMk23yd.png",m={},v={href:"https://account.aliyun.com/",target:"_blank",rel:"noopener noreferrer"};function b(f,n){const l=t("ExternalLinkIcon");return r(),i("div",null,[n[19]||(n[19]=a('<h3 id="_1、什么是-docker" tabindex="-1"><a class="header-anchor" href="#_1、什么是-docker"><span>1、什么是 Docker</span></a></h3><p>  <code>Docker</code> 是一个基于 Go 语言并遵从 Apache2.0 协议开源的、轻量级的容器引擎，主要运行于 Linux 和 Windows，用于创建、管理和编排容器。可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的服务器上。   Docker 的主要目标是 <code>Build, Ship and Run Any App, Anywhere</code>，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的 APP（可以是一个 WEB 应用或数据库应用等等）及其运行环境做到 <code>一次封装，到处运行</code>。是一个有助于做持续集成和整体发布的容器虚拟化技术。</p><p><img src="'+d+`" alt="图片"></p><h3 id="_2、docker-为什么会出现" tabindex="-1"><a class="header-anchor" href="#_2、docker-为什么会出现"><span>2、Docker 为什么会出现</span></a></h3><p>  一款产品从开发到上线，从操作系统，到运行环境，再到应用配置。作为开发+运维之间的协作我们需要关心很多东西，这也是很多互联网公司都不得不面对的问题，特别是各种版本的迭代之后，不同版本环境的兼容，对运维人员来说都是极大的考验。   以传统的部署方式来说，软件编码开发/测试结束后，所产出的成果即是程序或是能够编译执行的二进制字节码等。而为了让这些程序可以顺利执行，开发团队需要准备完整的部署文件，编写部署文档，说明所需要使用的全部配置文件和相关的软件环境，让运维团队得以部署应用程序。不过，即便如此，仍然会发生部署失败的状况。   而 Docker 镜像的设计，使得 Docker 得以打破过去 <code>程序即应用</code>的观念，将包括系统核心在内，运行应用程序所需要的系统环境，由下而上打包成一个镜像(image)文件，使应用程序可以在各个平台间无缝接轨运行，即 <code>一次封装，到处运行</code>。</p><h3 id="_3、docker-和传统虚拟机技术的不同" tabindex="-1"><a class="header-anchor" href="#_3、docker-和传统虚拟机技术的不同"><span>3、Docker 和传统虚拟机技术的不同</span></a></h3><ul><li>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；</li><li>而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</li><li>每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分各自的计算资源。</li></ul><h3 id="_4、安装-docker" tabindex="-1"><a class="header-anchor" href="#_4、安装-docker"><span>4、安装 Docker</span></a></h3><ul><li>安装流程已在下方</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment">#1、安装依赖包</span></span>
<span class="line">	<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils device-mapper-persistent-data lvm2</span>
<span class="line"><span class="token comment">#2、设置阿里云镜像源</span></span>
<span class="line">	<span class="token function">sudo</span> yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span>
<span class="line"><span class="token comment">#3、安装docker-ce</span></span>
<span class="line">	<span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce</span>
<span class="line"><span class="token comment">#4、设置开机自启</span></span>
<span class="line">	<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span></span>
<span class="line"><span class="token comment">#5、启动docker服务</span></span>
<span class="line">	<span class="token function">sudo</span> systemctl start <span class="token function">docker</span></span>
<span class="line"><span class="token comment">#6、配置镜像加速</span></span>
<span class="line">    <span class="token comment">#（1）创建/etc/docker文件夹</span></span>
<span class="line">        <span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker</span>
<span class="line">    <span class="token comment">#（2）创建/etc/docker/daemon.json文件</span></span>
<span class="line">        <span class="token function">vim</span> /etc/docker/daemon.json  <span class="token comment">#如果文件不存在会新建</span></span>
<span class="line">        <span class="token comment">#添加内容</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">          <span class="token string">&quot;registry-mirrors&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">&quot;你的镜像加速地址&quot;</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">#（3）加载配置</span></span>
<span class="line">        <span class="token function">sudo</span> systemctl daemon-reload</span>
<span class="line">    <span class="token comment">#（4）重启docker</span></span>
<span class="line">        <span class="token function">sudo</span> systemctl restart <span class="token function">docker</span></span>
<span class="line"><span class="token comment">#7、查看docker状态</span></span>
<span class="line">	<span class="token function">sudo</span> systemctl status <span class="token function">docker</span></span>
<span class="line"><span class="token comment">#8、停止docker</span></span>
<span class="line">	<span class="token function">sudo</span> systemctl stop <span class="token function">docker</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)),s("ul",null,[s("li",null,[n[1]||(n[1]=e("在配置镜像加速的时候，有以下镜像加速地址（建议使用阿里云或网易镜像加速地址）：")),n[2]||(n[2]=s("br",null,null,-1)),n[3]||(n[3]=e(" （1）官方镜像：")),n[4]||(n[4]=s("code",null,"https://registry.docker-cn.com",-1)),n[5]||(n[5]=s("br",null,null,-1)),n[6]||(n[6]=e(" （2）网易镜像：")),n[7]||(n[7]=s("code",null,"http://hub-mirror.c.163.com",-1)),n[8]||(n[8]=s("br",null,null,-1)),n[9]||(n[9]=e(" （3）清华大学：")),n[10]||(n[10]=s("code",null,"https://mirrors.tuna.tsinghua.edu.cn/",-1)),n[11]||(n[11]=s("br",null,null,-1)),n[12]||(n[12]=e(" （4）搜狐镜像：")),n[13]||(n[13]=s("code",null,"http://mirrors.sohu.com/",-1)),n[14]||(n[14]=s("br",null,null,-1)),n[15]||(n[15]=e(" （5）阿里镜像：阿里镜像加速地址需要登录")),s("a",v,[n[0]||(n[0]=e("阿里云控制台")),c(l)]),n[16]||(n[16]=e("获取，每个账号有唯一镜像加速地址。在控制台->镜像容器服务->镜像中心：镜像加速服务中获取。")),n[17]||(n[17]=s("br",null,null,-1))]),n[18]||(n[18]=s("li",null,"在第七步查看 Docker 运行状态时，看到以下控制台打印，即表示安装成功。",-1))]),n[20]||(n[20]=a('<p><img src="'+p+'" alt="图片"></p><h3 id="_5、永远的-helloworld" tabindex="-1"><a class="header-anchor" href="#_5、永远的-helloworld"><span>5、永远的 <code>HelloWorld</code></span></a></h3><ul><li><p>安装好了之后，通过一个 <code>HelloWorld</code>实例来体验一下 Docker 的神奇之处。</p><p>这里我们使用 Docker 命令运行 <code>HelloWorld</code>实例：<code>docker run hello-world</code></p></li></ul><p><img src="'+u+'" alt="图片"></p><ul><li>此时我们不禁思考，我们本机又没有 <code>hello-world</code>这个程序，为什么能直接使用 <code>docker run</code>这个命令去直接运行呢？别急，接下来给大家详细分析一下，<code>docker run</code>都做了什么。</li></ul><h3 id="_6、docker-run做了什么" tabindex="-1"><a class="header-anchor" href="#_6、docker-run做了什么"><span>6、<code>docker run</code>做了什么</span></a></h3><p>  在 Docker 中，<code>docker run</code>是一个非常重要的命令，主要功能是启动程序。下面通过为大家详细分析 <code>run</code>做了什么。</p><p><img src="'+k+'" alt="图片"></p>',8))])}const h=o(m,[["render",b],["__file","index.html.vue"]]),D=JSON.parse('{"path":"/blogs/Docker/2021113001/","title":"Docker介绍与安装","lang":"zh-CN","frontmatter":{"title":"Docker介绍与安装","date":"2021-11-30T00:00:00.000Z","permalink":"/blogs/Docker/2021113001/","tags":["DevOps","云原生"],"categories":["Docker"]},"headers":[{"level":3,"title":"1、什么是 Docker","slug":"_1、什么是-docker","link":"#_1、什么是-docker","children":[]},{"level":3,"title":"2、Docker 为什么会出现","slug":"_2、docker-为什么会出现","link":"#_2、docker-为什么会出现","children":[]},{"level":3,"title":"3、Docker 和传统虚拟机技术的不同","slug":"_3、docker-和传统虚拟机技术的不同","link":"#_3、docker-和传统虚拟机技术的不同","children":[]},{"level":3,"title":"4、安装 Docker","slug":"_4、安装-docker","link":"#_4、安装-docker","children":[]},{"level":3,"title":"5、永远的 HelloWorld","slug":"_5、永远的-helloworld","link":"#_5、永远的-helloworld","children":[]},{"level":3,"title":"6、docker run做了什么","slug":"_6、docker-run做了什么","link":"#_6、docker-run做了什么","children":[]}],"git":{"createdTime":1741686968000,"updatedTime":1741859991000,"contributors":[{"name":"lxy","email":"jinsulive@163.com","commits":3}]},"filePathRelative":"blogs/Docker/Docker介绍与安装.md"}');export{h as comp,D as data};
